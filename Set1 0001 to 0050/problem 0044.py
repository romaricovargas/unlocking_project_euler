'''
Problem 44
PENTAGON NUMBERS

Pentagon numbers are generated by the formula P(n) = n(3n-1)/2. 
The first ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145 ...

It can be seen that P(4) + P(1) = 22 + 70 = 92 = P(8). 
However, their difference, 70-22=48, is not pentagonal.
Find the pair of pentagonal numbers, P(j) and P(k) for which 
their sum and difference are pentagonal and D = |P(k) - P(j)| is minimised; 
what is the value of D?

~ ~ ~ ~ ~ ~ ~ ~ ~ ~

Formula for checking if a number is pentagonal:

n = (sqrt((24*P)+1) + 1) / 6, if n is whole number then P is pentagonal

source: https://en.wikipedia.org/wiki/Pentagonal_number

'''

from math import sqrt 

def problem_0044(limit=1000):
    pentagonal = {1:1}     # dictionary of pentagonal numbers with initial first entry. ex: {1:1, 2:5, 3:12}
    unpentagonal = []      # list of non-pentagonal numbers, to avoid redundant computation. 
    n = 2                  # initial n
    answer_found = False   # Flag if answer was found

    def compute_pentagonal(x):
        return int(x*((3*x)-1)/2)
    
    def check_pentagonal(y, p, u):
        # y is the number being tested if pentagonal
        # p is the pentagonal dictionary
        # u is the non-pentagonal list

        if y in p.values():                 # Return True if y is already in pentagonal dict 
            return True
        elif y in u:                        # Return False if y is already in non-pentagonal list
            return False
        else:               
            x = (sqrt((24*y)+1) + 1) / 6    # Use formula for checking if a number is pentagonal 
            if int(x) == x:
                p[x] = y                    # Store number in pentagonal dict ifpentagonal
                return True
            else:
                u.append(y)                 # Store number in non-pentagonal list of non-pentagonal
                return False

    while len(pentagonal) < limit and not answer_found:
        pentagonal[n] = compute_pentagonal(n)

        #for m in range(n-1, 0, -1):
        #    if check_pentagonal((pentagonal[n] + pentagonal[m]), pentagonal, unpentagonal):
        #        print("sum found!", pentagonal[n], pentagonal[m])
        #    if check_pentagonal((pentagonal[n] - pentagonal[m]), pentagonal, unpentagonal):
        #        print("dif found!", pentagonal[n], pentagonal[m])
        #    if check_pentagonal((pentagonal[n] + pentagonal[m]), pentagonal, unpentagonal):
        #        if check_pentagonal((pentagonal[n] - pentagonal[m]), pentagonal, unpentagonal):
        #            print("both found!", pentagonal[n], pentagonal[m], '<=========================================')
        #            answer_found = True
            #if check_pentagonal((pentagonal[n] + pentagonal[m]), pentagonal, unpentagonal):
            #    print("sum found!", pentagonal[n], pentagonal[m])
            #if check_pentagonal((pentagonal[n] - pentagonal[m]), pentagonal, unpentagonal):
            #    print("dif found!", pentagonal[n], pentagonal[m])
                #if check_pentagonal((pentagonal[n] - pentagonal[m]), pentagonal, unpentagonal):
                #    print(pentagonal[n] - pentagonal[m])
                #    answer_found = True

        n += 1

    #for k, v in pentagonal.items():
    #    print(k, " : ", v, check_pentagonal(v, pentagonal, unpentagonal)) 


    for k, v in pentagonal.copy().items():
        for i in range(k-1, 0, -1):
            j = v + pentagonal[i]
            if check_pentagonal(j, pentagonal, unpentagonal):
                #print(v, pentagonal[i], j)
                k1 = v + j
                k2 = pentagonal[i] + j
                if check_pentagonal(k1, pentagonal, unpentagonal):
                    print("k1 found", v, j, "sum =", k1, "dif =", v-j)
                if check_pentagonal(k2, pentagonal, unpentagonal):
                    print("k2 found", pentagonal[i] , j, "sum =", k2, "dif =", pentagonal[i] -j)




    #print(7, check_pentagonal(7, pentagonal, unpentagonal))
    #print(20, check_pentagonal(20, pentagonal, unpentagonal))
    #print(1002, check_pentagonal(1002, pentagonal, unpentagonal))
    #print(146120415, check_pentagonal(146120415, pentagonal, unpentagonal))
    #print(7, check_pentagonal(7, pentagonal, unpentagonal))
    #print(20, check_pentagonal(20, pentagonal, unpentagonal))
    #print(1002, check_pentagonal(1002, pentagonal, unpentagonal))
    #print(146120415, check_pentagonal(146120415, pentagonal, unpentagonal))


problem_0044(1000)